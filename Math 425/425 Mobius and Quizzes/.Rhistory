stat_function(fun = y2, aes(color = "Manual")) +
#scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Quarter Mile Time (qsec)", y = "Miles per Gallon (mpg)") +
theme_bw()
plot(mtc.lm,which=1:3)
model = mtc.lm
rss <- sum(residuals(model)^2)
model = mtc.lm
rss <- sum(residuals(model)^2)
ress
model = mtc.lm
rss <- sum(residuals(model)^2)
rss
mtc2.lm <- lm(qsec ~ displ + am + displ:am + I(displ^2) + I(displ^2):am, data=mtcars)
mtc2.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
mtc2.lm <- lm(qsec ~ disp + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
# scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
mtc2.lm <- lm(qsec ~ disp + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
mtc2.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
mtc2.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted value
y1 <- function(x) ß[1] + ß[2] + ß[3] * x + ß[4] * x + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] ß[3] * x + ß[4] * x + ß[5] * x * 1 + ß[6] * x^2 * 1
ß <- coef(mtc2.lm)
# Define functions for predicted value
y1 <- function(x) ß[1] + ß[2] + ß[3] * x + ß[4] * x + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] + ß[3] * x + ß[4] * x + ß[5] * x * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
mtc2.lm <- lm(qsec ~ disp + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x^2 + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x^2 + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x^2 + ß[4] * x * 0 + ß[5] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x^2 + ß[4] * x * 1 + ß[5] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * 0 + ß[3] * x + ß[4] * x^2 + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * 1 + ß[3] * x + ß[4] * x^2 + ß[5] * x * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
mtc2.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * 0 + ß[3] * x + ß[4] * x^2 + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * 1 + ß[3] * x + ß[4] * x^2 + ß[5] * x * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * x * 0 + ß[4] * x^2 + ß[5] * x * 0 + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * x * 1 + ß[4] * x^2 + ß[5] * x * 1 + ß[5] * x * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
plot(mtc2.lm,which=1:3)
mtc2.lm <- lm(qsec ~ disp + am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
library(ggplot2)
# Parameters
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
# Define the function
fun <- function(x) ß1 + ß2 * x + ß3 * 0 + ß4 * x^2 + ß5 * 0 + ß6 * x^2 * 0
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -10, 10)
y <- fun(x)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
geom_line() +  # Connect points with a line
labs(x = "X", y = "Y", title = "Generated Data Plot") +
theme_minimal()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * 0 + ß4 * x^2 + ß5 * 0 + ß6 * x^2 * 0
fun2 <- function(x) ß1 + ß2 * x + ß3 * 1 + ß4 * x^2 + ß5 * 1 + ß6 * x^2 * 1
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -10, 10)
y <- fun(x)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_minimal()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * 0 + ß4 * x^2 + ß5 * 0 + ß6 * x^2 * 0
fun2 <- function(x) ß1 + ß2 * x + ß3 * 1 + ß4 * x^2 + ß5 * 1 + ß6 * x^2 * 1
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y <- fun(x)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_minimal()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * 0 + ß4 * x^2 + ß5 * 0 + ß6 * x^2 * 0
fun2 <- function(x) ß1 + ß2 * x + ß3 * 1 + ß4 * x^2 + ß5 * 1 + ß6 * x^2 * 1
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y <- fun(x)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
ylim(-10, 10)
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_minimal()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * 0 + ß4 * x^2 + ß5 * 0 + ß6 * x^2 * 0
fun2 <- function(x) ß1 + ß2 * x + ß3 * 1 + ß4 * x^2 + ß5 * 1 + ß6 * x^2 * 1
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y <- fun(x)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
ylim(-10, 10)
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
fun2 <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
ylim(-10, 10)
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x,y + )
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x) + epsilon_i
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
stat_function(fun = fun, aes(color = "Function 1")) +
stat_function(fun = fun2, aes(color = "Function 2")) +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
ylim(-10, 10)
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x) + epsilon_i
plotdata <- data.frame(x, y)
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
ylim(-10, 10)
scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x) + epsilon_i
plotdata <- data.frame(x, y)
tq.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
ylim(-10, 10) +
# scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x) + epsilon_i
plotdata <- data.frame(x, y)
tq.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
ß <- coef(tq.lm)
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
ylim(-10, 10) +
# scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
ß1 <- -2
ß2 <- 3
ß3 <- 4
ß4 <- 4
ß5 <- 2
ß6 <- -7
x2 <- sample(c(0,1),100,replace=TRUE)
# Define the functions
fun <- function(x) ß1 + ß2 * x + ß3 * x2 + ß4 * x^2 + ß5 * x2 + ß6 * x^2 * x2
sigma <- .001 #change to whatever positive number you want
epsilon_i <- rnorm(n, 0, sigma)
# Generate data
set.seed(123)  # Setting seed for reproducibility
n <- 100
x <- runif(n, -2, 2)
y = fun(x) + epsilon_i
plotdata <- data.frame(x, y, x2)
tq.lm <- lm(y ~ x + x2 + x:x2 + I(x^2) + I(x^2):x2, data=plotdata)
ß <- coef(tq.lm)
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(plotdata, aes(x = x, y = y)) +
geom_point() +
labs(x = "X", y = "Y", title = "Generated Data Plot") +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
ylim(-10, 10) +
# scale_color_manual(values = c("blue", "red"), labels = c("Function 1", "Function 2")) +
theme_bw()
mtc2.lm <- lm(qsec ~ disp + am + disp:am + I(disp^2) + I(disp^2):am, data=mtcars)
summary(mtc2.lm)
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
ß
ß <- coef(mtc2.lm)
# Define functions for predicted values
y1 <- function(x) ß[1] + ß[2] * x + ß[3] * 0 + ß[4] * x^2 + ß[5] * x * 0 + ß[6] * x^2 * 0
y2 <- function(x) ß[1] + ß[2] * x + ß[3] * 1 + ß[4] * x^2 + ß[5] * x * 1 + ß[6] * x^2 * 1
# Plotting
ggplot(mtcars, aes(x = disp, y = qsec, color = factor(am))) +
geom_point() +
stat_function(fun = y1, aes(color = "Automatic")) +
stat_function(fun = y2, aes(color = "Manual")) +
#   scale_color_manual(values = c("blue", "red"), labels = c("Automatic", "Manual")) +
labs(x = "Engine Displacement (disp)", y = "Quarter Mile Time (qsec)") +
theme_bw()
