# 28. OpenPorchSF: Open Porch Area in Square Feet
# OpenPorchSF is numeric and does not require mapping.
# 29. EnclosedPorch: Enclosed Porch Area in Square Feet
# EnclosedPorch is numeric and does not require mapping.
# 30. 3SsnPorch: Three-Season Porch Area in Square Feet
# 3SsnPorch is numeric and does not require mapping.
# 31. ScreenPorch: Screen Porch Area in Square Feet
# ScreenPorch is numeric and does not require mapping.
# 32. PoolArea: Pool Area in Square Feet
# PoolArea is numeric and does not require mapping.
# 33. MiscVal: Miscellaneous Features Value
# MiscVal is numeric and does not require mapping.
# 34. MoSold: Month Sold
MoSold_mapping <- c(
"1" = 1,   # January
"2" = 2,   # February
"3" = 3,   # March
"4" = 4,   # April
"5" = 5,   # May
"6" = 6,   # June
"7" = 7,   # July
"8" = 8,   # August
"9" = 9,   # September
"10" = 10, # October
"11" = 11, # November
"12" = 12  # December
)
# 35. YrSold: Year Sold
# YrSold is numeric and does not require mapping.
# 36. SaleType: Type of Sale
SaleType_mapping <- c(
"WD" = 1,    # Warranty Deed
"CWD" = 2,   # Contract Deed
"VWD" = 3,   # Warranty Deed (Partial)
"New" = 4,   # New Construction
"COD" = 5,   # Court Deed
"Con" = 6,   # Conventional
"Oth" = 7,   # Other
"None" = 8   # No Sale
)
# 37. SaleCondition: Condition of Sale
SaleCondition_mapping <- c(
"Normal" = 1, # Normal Sale
"Abnorml" = 2, # Abnormal Sale
"AdjLand" = 3, # Adjoining Land
"Alloca" = 4, # Allocation
"Family" = 5, # Family Sale
"Partial" = 6 # Partial Sale
)
# Apply mappings to the dataset
dataset <- HNoNa
# 1. OverallQual
dataset$OverallQual <- as.numeric(factor(dataset$OverallQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 2. OverallCond
dataset$OverallCond <- as.numeric(factor(dataset$OverallCond, levels = names(OverallCond_mapping), labels = OverallCond_mapping))
# 3. YearBuilt and YearRemodAdd (numeric, no mapping needed)
# No code needed for these columns
# 4. MasVnrType
dataset$MasVnrType <- as.numeric(factor(dataset$MasVnrType, levels = names(MasVnrType_mapping), labels = MasVnrType_mapping))
# 5. ExterCond
dataset$ExterCond <- as.numeric(factor(dataset$ExterCond, levels = names(OverallCond_mapping), labels = OverallCond_mapping))
# 6. ExterQual
dataset$ExterQual <- as.numeric(factor(dataset$ExterQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 7. Foundation
dataset$Foundation <- as.numeric(factor(dataset$Foundation, levels = names(Foundation_mapping), labels = Foundation_mapping))
# 8. BsmtQual
dataset$BsmtQual <- as.numeric(factor(dataset$BsmtQual, levels = names(BsmtQual_mapping), labels = BsmtQual_mapping))
# 9. BsmtCond
dataset$BsmtCond <- as.numeric(factor(dataset$BsmtCond, levels = names(BsmtQual_mapping), labels = BsmtQual_mapping))
# 10. BsmtExposure
dataset$BsmtExposure <- as.numeric(factor(dataset$BsmtExposure, levels = names(BsmtExposure_mapping), labels = BsmtExposure_mapping))
# 11. BsmtFinType1
dataset$BsmtFinType1 <- as.numeric(factor(dataset$BsmtFinType1, levels = names(BsmtFinType1_mapping), labels = BsmtFinType1_mapping))
# 12. BsmtFinType2
dataset$BsmtFinType2 <- as.numeric(factor(dataset$BsmtFinType2, levels = names(BsmtFinType1_mapping), labels = BsmtFinType1_mapping))
# 13. Heating
dataset$Heating <- as.numeric(factor(dataset$Heating, levels = names(Heating_mapping), labels = Heating_mapping))
# 14. HeatingQC
dataset$HeatingQC <- as.numeric(factor(dataset$HeatingQC, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 15. CentralAir
dataset$CentralAir <- as.numeric(factor(dataset$CentralAir, levels = names(CentralAir_mapping), labels = CentralAir_mapping))
# 16. Electrical
dataset$Electrical <- as.numeric(factor(dataset$Electrical, levels = names(Electrical_mapping), labels = Electrical_mapping))
# 17. KitchenQual
dataset$KitchenQual <- as.numeric(factor(dataset$KitchenQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 18. Functional
dataset$Functional <- as.numeric(factor(dataset$Functional, levels = names(Functional_mapping), labels = Functional_mapping))
# 19. Fireplaces (numeric, no mapping needed)
# No code needed for this column
# 20. FireplaceQu
dataset$FireplaceQu <- as.numeric(factor(dataset$FireplaceQu, levels = names(FireplaceQu_mapping), labels = FireplaceQu_mapping))
# 21. GarageType
dataset$GarageType <- as.numeric(factor(dataset$GarageType, levels = names(GarageType_mapping), labels = GarageType_mapping))
# 22. GarageFinish
dataset$GarageFinish <- as.numeric(factor(dataset$GarageFinish, levels = names(GarageFinish_mapping), labels = GarageFinish_mapping))
# 23. GarageQual
dataset$GarageQual <- as.numeric(factor(dataset$GarageQual, levels = names(GarageQual_mapping), labels = GarageQual_mapping))
# 24. GarageCond
dataset$GarageCond <- as.numeric(factor(dataset$GarageCond, levels = names(GarageQual_mapping), labels = GarageQual_mapping))
# 25. PavedDrive
dataset$PavedDrive <- as.numeric(factor(dataset$PavedDrive, levels = names(PavedDrive_mapping), labels = PavedDrive_mapping))
# 26. WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal (numeric, no mapping needed)
# No code needed for these columns
# 27. MoSold
dataset$MoSold <- as.numeric(factor(dataset$MoSold, levels = names(MoSold_mapping), labels = MoSold_mapping))
# 28. YrSold (numeric, no mapping needed)
# No code needed for this column
# 29. SaleType
dataset$SaleType <- as.numeric(factor(dataset$SaleType, levels = names(SaleType_mapping), labels = SaleType_mapping))
# 30. SaleCondition
dataset$SaleCondition <- as.numeric(factor(dataset$SaleCondition, levels = names(SaleCondition_mapping), labels = SaleCondition_mapping))
View(HNoNa)
pacman::p_load(tidyverse,dplyr,readr)
housing <- read_csv("train.csv")
HNoNa <- drop_na(housing)
# Apply mappings to the dataset
dataset <- HNoNa
# 1. OverallQual
dataset$OverallQual <- as.numeric(factor(dataset$OverallQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 2. OverallCond
dataset$OverallCond <- as.numeric(factor(dataset$OverallCond, levels = names(OverallCond_mapping), labels = OverallCond_mapping))
# 3. YearBuilt and YearRemodAdd (numeric, no mapping needed)
# No code needed for these columns
# 4. MasVnrType
dataset$MasVnrType <- as.numeric(factor(dataset$MasVnrType, levels = names(MasVnrType_mapping), labels = MasVnrType_mapping))
# 5. ExterCond
dataset$ExterCond <- as.numeric(factor(dataset$ExterCond, levels = names(OverallCond_mapping), labels = OverallCond_mapping))
# 6. ExterQual
dataset$ExterQual <- as.numeric(factor(dataset$ExterQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 7. Foundation
dataset$Foundation <- as.numeric(factor(dataset$Foundation, levels = names(Foundation_mapping), labels = Foundation_mapping))
# 8. BsmtQual
dataset$BsmtQual <- as.numeric(factor(dataset$BsmtQual, levels = names(BsmtQual_mapping), labels = BsmtQual_mapping))
# 9. BsmtCond
dataset$BsmtCond <- as.numeric(factor(dataset$BsmtCond, levels = names(BsmtQual_mapping), labels = BsmtQual_mapping))
# 10. BsmtExposure
dataset$BsmtExposure <- as.numeric(factor(dataset$BsmtExposure, levels = names(BsmtExposure_mapping), labels = BsmtExposure_mapping))
# 11. BsmtFinType1
dataset$BsmtFinType1 <- as.numeric(factor(dataset$BsmtFinType1, levels = names(BsmtFinType1_mapping), labels = BsmtFinType1_mapping))
# 12. BsmtFinType2
dataset$BsmtFinType2 <- as.numeric(factor(dataset$BsmtFinType2, levels = names(BsmtFinType1_mapping), labels = BsmtFinType1_mapping))
# 13. Heating
dataset$Heating <- as.numeric(factor(dataset$Heating, levels = names(Heating_mapping), labels = Heating_mapping))
# 14. HeatingQC
dataset$HeatingQC <- as.numeric(factor(dataset$HeatingQC, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 15. CentralAir
dataset$CentralAir <- as.numeric(factor(dataset$CentralAir, levels = names(CentralAir_mapping), labels = CentralAir_mapping))
# 16. Electrical
dataset$Electrical <- as.numeric(factor(dataset$Electrical, levels = names(Electrical_mapping), labels = Electrical_mapping))
# 17. KitchenQual
dataset$KitchenQual <- as.numeric(factor(dataset$KitchenQual, levels = names(OverallQual_mapping), labels = OverallQual_mapping))
# 18. Functional
dataset$Functional <- as.numeric(factor(dataset$Functional, levels = names(Functional_mapping), labels = Functional_mapping))
# 19. Fireplaces (numeric, no mapping needed)
# No code needed for this column
# 20. FireplaceQu
dataset$FireplaceQu <- as.numeric(factor(dataset$FireplaceQu, levels = names(FireplaceQu_mapping), labels = FireplaceQu_mapping))
# 21. GarageType
dataset$GarageType <- as.numeric(factor(dataset$GarageType, levels = names(GarageType_mapping), labels = GarageType_mapping))
# 22. GarageFinish
dataset$GarageFinish <- as.numeric(factor(dataset$GarageFinish, levels = names(GarageFinish_mapping), labels = GarageFinish_mapping))
# 23. GarageQual
dataset$GarageQual <- as.numeric(factor(dataset$GarageQual, levels = names(GarageQual_mapping), labels = GarageQual_mapping))
# 24. GarageCond
dataset$GarageCond <- as.numeric(factor(dataset$GarageCond, levels = names(GarageQual_mapping), labels = GarageQual_mapping))
# 25. PavedDrive
dataset$PavedDrive <- as.numeric(factor(dataset$PavedDrive, levels = names(PavedDrive_mapping), labels = PavedDrive_mapping))
# 26. WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal (numeric, no mapping needed)
# No code needed for these columns
# 27. MoSold
dataset$MoSold <- as.numeric(factor(dataset$MoSold, levels = names(MoSold_mapping), labels = MoSold_mapping))
# 28. YrSold (numeric, no mapping needed)
# No code needed for this column
# 29. SaleType
dataset$SaleType <- as.numeric(factor(dataset$SaleType, levels = names(SaleType_mapping), labels = SaleType_mapping))
# 30. SaleCondition
dataset$SaleCondition <- as.numeric(factor(dataset$SaleCondition, levels = names(SaleCondition_mapping), labels = SaleCondition_mapping))
HNoNa <- dataset
View(HNoNa)
# List columns in the dataset to verify their names
print(names(dataset))
# Print a sample of the mappings
print(OverallQual_mapping)
print(OverallCond_mapping)
# Repeat for other mappings
HNoNa <- drop_na(housing)
# Check the unique values in a column before mapping
print(unique(dataset$OverallQual))
# Check the levels used for mapping
print(levels(factor(dataset$OverallQual)))
# Check for NA or unexpected values in the column
print(sum(is.na(dataset$OverallQual)))
print(unique(dataset$OverallQual))
# Define mappings for categorical variables
# (Mappings are already defined in your script)
# Apply mappings to the dataset
dataset <- HNoNa
# Function to apply mapping
apply_mapping <- function(column, mapping) {
if (all(is.na(column))) {
return(column)  # Return column as is if it's already NA
}
mapped_column <- as.numeric(factor(column, levels = names(mapping), labels = mapping))
return(mapped_column)
}
# Apply mappings using the function
dataset$OverallQual <- apply_mapping(dataset$OverallQual, OverallQual_mapping)
dataset$OverallCond <- apply_mapping(dataset$OverallCond, OverallCond_mapping)
dataset$MasVnrType <- apply_mapping(dataset$MasVnrType, MasVnrType_mapping)
dataset$ExterCond <- apply_mapping(dataset$ExterCond, OverallCond_mapping)
dataset$ExterQual <- apply_mapping(dataset$ExterQual, OverallQual_mapping)
dataset$Foundation <- apply_mapping(dataset$Foundation, Foundation_mapping)
dataset$BsmtQual <- apply_mapping(dataset$BsmtQual, BsmtQual_mapping)
dataset$BsmtCond <- apply_mapping(dataset$BsmtCond, BsmtQual_mapping)
dataset$BsmtExposure <- apply_mapping(dataset$BsmtExposure, BsmtExposure_mapping)
dataset$BsmtFinType1 <- apply_mapping(dataset$BsmtFinType1, BsmtFinType1_mapping)
dataset$BsmtFinType2 <- apply_mapping(dataset$BsmtFinType2, BsmtFinType1_mapping)
dataset$Heating <- apply_mapping(dataset$Heating, Heating_mapping)
dataset$HeatingQC <- apply_mapping(dataset$HeatingQC, OverallQual_mapping)
dataset$CentralAir <- apply_mapping(dataset$CentralAir, CentralAir_mapping)
dataset$Electrical <- apply_mapping(dataset$Electrical, Electrical_mapping)
dataset$KitchenQual <- apply_mapping(dataset$KitchenQual, OverallQual_mapping)
dataset$Functional <- apply_mapping(dataset$Functional, Functional_mapping)
dataset$FireplaceQu <- apply_mapping(dataset$FireplaceQu, FireplaceQu_mapping)
dataset$GarageType <- apply_mapping(dataset$GarageType, GarageType_mapping)
dataset$GarageFinish <- apply_mapping(dataset$GarageFinish, GarageFinish_mapping)
dataset$GarageQual <- apply_mapping(dataset$GarageQual, GarageQual_mapping)
dataset$GarageCond <- apply_mapping(dataset$GarageCond, GarageQual_mapping)
dataset$PavedDrive <- apply_mapping(dataset$PavedDrive, PavedDrive_mapping)
dataset$MoSold <- apply_mapping(dataset$MoSold, MoSold_mapping)
dataset$SaleType <- apply_mapping(dataset$SaleType, SaleType_mapping)
dataset$SaleCondition <- apply_mapping(dataset$SaleCondition, SaleCondition_mapping)
# Review the first few rows of the dataset to check if mappings applied correctly
head(dataset)
# Update HNoNa with the mapped dataset
HNoNa <- dataset
View(HNoNa)
pacman::p_load(tidyverse,dplyr,readr)
housing <- read_csv("train.csv")
View(housing)
View(housing)
housing %>% housing %>% select(-Alley)
View(housing)
housing <- housing %>% select(-Alley)
HNoNa <- drop_na(housing)
View(HNoNa)
View(housing)
housing <- housing %>% select(-Alley)
housing <- read_csv("train.csv")
View(housing)
housing <- housing %>% select(-Alley)
HNoNa <- drop_na(housing)
View(HNoNa)
housing <- read_csv("train.csv")
housing <- housing %>% select(-Alley)
housing_no_na <- housing %>% drop_na()
View(housing_no_na)
housing <- housing %>% select(-Alley)
housing <- read_csv("train.csv")
housing <- housing %>% select(-Alley)
housing_no_na <- housing %>% na.omit()
View(housing_no_na)
View(housing)
housing <- housing %>% select(-Alley)
housing <- read_csv("train.csv")
housing <- housing %>% select(-Alley)
View(housing)
housing_no_na <- housing %>% na.omit()
View(housing_no_na)
summary(is.na(housing))
# Assuming the dataset is named 'housing'
library(dplyr)
housing <- housing %>%
mutate(
MSSubClass = as.factor(MSSubClass),
MSZoning = as.factor(MSZoning),
LotFrontage = as.numeric(LotFrontage),
LotArea = as.numeric(LotArea),
Street = as.factor(Street),
Alley = as.factor(Alley),
LotShape = as.factor(LotShape),
LandContour = as.factor(LandContour),
Utilities = as.factor(Utilities),
LotConfig = as.factor(LotConfig),
LandSlope = as.factor(LandSlope),
Neighborhood = as.factor(Neighborhood),
Condition1 = as.factor(Condition1),
Condition2 = as.factor(Condition2),
BldgType = as.factor(BldgType),
HouseStyle = as.factor(HouseStyle),
OverallQual = as.integer(OverallQual),
OverallCond = as.integer(OverallCond),
YearBuilt = as.integer(YearBuilt),
YearRemodAdd = as.integer(YearRemodAdd),
RoofStyle = as.factor(RoofStyle),
RoofMatl = as.factor(RoofMatl),
Exterior1st = as.factor(Exterior1st),
Exterior2nd = as.factor(Exterior2nd),
MasVnrType = as.factor(MasVnrType),
MasVnrArea = as.numeric(MasVnrArea),
ExterQual = as.factor(ExterQual),
ExterCond = as.factor(ExterCond),
Foundation = as.factor(Foundation),
BsmtQual = as.factor(BsmtQual),
BsmtCond = as.factor(BsmtCond),
BsmtExposure = as.factor(BsmtExposure),
BsmtFinType1 = as.factor(BsmtFinType1),
BsmtFinSF1 = as.numeric(BsmtFinSF1),
BsmtFinType2 = as.factor(BsmtFinType2),
BsmtFinSF2 = as.numeric(BsmtFinSF2),
BsmtUnfSF = as.numeric(BsmtUnfSF),
TotalBsmtSF = as.numeric(TotalBsmtSF),
Heating = as.factor(Heating),
HeatingQC = as.factor(HeatingQC),
CentralAir = as.factor(CentralAir),
Electrical = as.factor(Electrical),
`1stFlrSF` = as.numeric(`1stFlrSF`),
`2ndFlrSF` = as.numeric(`2ndFlrSF`),
LowQualFinSF = as.numeric(LowQualFinSF),
GrLivArea = as.numeric(GrLivArea),
BsmtFullBath = as.integer(BsmtFullBath),
BsmtHalfBath = as.integer(BsmtHalfBath),
FullBath = as.integer(FullBath),
HalfBath = as.integer(HalfBath),
BedroomAbvGr = as.integer(BedroomAbvGr),
KitchenAbvGr = as.integer(KitchenAbvGr),
KitchenQual = as.factor(KitchenQual),
TotRmsAbvGrd = as.integer(TotRmsAbvGrd),
Functional = as.factor(Functional),
Fireplaces = as.integer(Fireplaces),
FireplaceQu = as.factor(FireplaceQu),
GarageType = as.factor(GarageType),
GarageYrBlt = as.integer(GarageYrBlt),
GarageFinish = as.factor(GarageFinish),
GarageCars = as.integer(GarageCars),
GarageArea = as.numeric(GarageArea),
GarageQual = as.factor(GarageQual),
GarageCond = as.factor(GarageCond),
PavedDrive = as.factor(PavedDrive),
WoodDeckSF = as.numeric(WoodDeckSF),
OpenPorchSF = as.numeric(OpenPorchSF),
EnclosedPorch = as.numeric(EnclosedPorch),
`3SsnPorch` = as.numeric(`3SsnPorch`),
ScreenPorch = as.numeric(ScreenPorch),
PoolArea = as.numeric(PoolArea),
PoolQC = as.factor(PoolQC),
Fence = as.factor(Fence),
MiscFeature = as.factor(MiscFeature),
MiscVal = as.numeric(MiscVal),
MoSold = as.integer(MoSold),
YrSold = as.integer(YrSold),
SaleType = as.factor(SaleType),
SaleCondition = as.factor(SaleCondition)
)
# Assuming the dataset is named 'housing'
library(dplyr)
housing <- housing %>%
mutate(
MSSubClass = as.factor(MSSubClass),
MSZoning = as.factor(MSZoning),
LotFrontage = as.numeric(LotFrontage),
LotArea = as.numeric(LotArea),
Street = as.factor(Street),
# Alley = as.factor(Alley),
LotShape = as.factor(LotShape),
LandContour = as.factor(LandContour),
Utilities = as.factor(Utilities),
LotConfig = as.factor(LotConfig),
LandSlope = as.factor(LandSlope),
Neighborhood = as.factor(Neighborhood),
Condition1 = as.factor(Condition1),
Condition2 = as.factor(Condition2),
BldgType = as.factor(BldgType),
HouseStyle = as.factor(HouseStyle),
OverallQual = as.integer(OverallQual),
OverallCond = as.integer(OverallCond),
YearBuilt = as.integer(YearBuilt),
YearRemodAdd = as.integer(YearRemodAdd),
RoofStyle = as.factor(RoofStyle),
RoofMatl = as.factor(RoofMatl),
Exterior1st = as.factor(Exterior1st),
Exterior2nd = as.factor(Exterior2nd),
MasVnrType = as.factor(MasVnrType),
MasVnrArea = as.numeric(MasVnrArea),
ExterQual = as.factor(ExterQual),
ExterCond = as.factor(ExterCond),
Foundation = as.factor(Foundation),
BsmtQual = as.factor(BsmtQual),
BsmtCond = as.factor(BsmtCond),
BsmtExposure = as.factor(BsmtExposure),
BsmtFinType1 = as.factor(BsmtFinType1),
BsmtFinSF1 = as.numeric(BsmtFinSF1),
BsmtFinType2 = as.factor(BsmtFinType2),
BsmtFinSF2 = as.numeric(BsmtFinSF2),
BsmtUnfSF = as.numeric(BsmtUnfSF),
TotalBsmtSF = as.numeric(TotalBsmtSF),
Heating = as.factor(Heating),
HeatingQC = as.factor(HeatingQC),
CentralAir = as.factor(CentralAir),
Electrical = as.factor(Electrical),
`1stFlrSF` = as.numeric(`1stFlrSF`),
`2ndFlrSF` = as.numeric(`2ndFlrSF`),
LowQualFinSF = as.numeric(LowQualFinSF),
GrLivArea = as.numeric(GrLivArea),
BsmtFullBath = as.integer(BsmtFullBath),
BsmtHalfBath = as.integer(BsmtHalfBath),
FullBath = as.integer(FullBath),
HalfBath = as.integer(HalfBath),
BedroomAbvGr = as.integer(BedroomAbvGr),
KitchenAbvGr = as.integer(KitchenAbvGr),
KitchenQual = as.factor(KitchenQual),
TotRmsAbvGrd = as.integer(TotRmsAbvGrd),
Functional = as.factor(Functional),
Fireplaces = as.integer(Fireplaces),
FireplaceQu = as.factor(FireplaceQu),
GarageType = as.factor(GarageType),
GarageYrBlt = as.integer(GarageYrBlt),
GarageFinish = as.factor(GarageFinish),
GarageCars = as.integer(GarageCars),
GarageArea = as.numeric(GarageArea),
GarageQual = as.factor(GarageQual),
GarageCond = as.factor(GarageCond),
PavedDrive = as.factor(PavedDrive),
WoodDeckSF = as.numeric(WoodDeckSF),
OpenPorchSF = as.numeric(OpenPorchSF),
EnclosedPorch = as.numeric(EnclosedPorch),
`3SsnPorch` = as.numeric(`3SsnPorch`),
ScreenPorch = as.numeric(ScreenPorch),
PoolArea = as.numeric(PoolArea),
PoolQC = as.factor(PoolQC),
Fence = as.factor(Fence),
MiscFeature = as.factor(MiscFeature),
MiscVal = as.numeric(MiscVal),
MoSold = as.integer(MoSold),
YrSold = as.integer(YrSold),
SaleType = as.factor(SaleType),
SaleCondition = as.factor(SaleCondition)
)
# Check the structure of the dataset to verify the changes
str(housing)
# Check the structure of the dataset to verify the changes
str(housing)
housing_no_na <- housing %>% na.omit()
View(housing_no_na)
remove_na_rows <- function(dataset) {
# Use the complete.cases function to identify rows with no NA values
clean_dataset <- dataset[complete.cases(dataset), ]
return(clean_dataset)
}
# Example usage:
housing_clean <- remove_na_rows(housing)
View(housing_clean)
housing <- read_csv("train.csv")
View(housing)
remove_na_rows <- function(dataset) {
# Remove rows with any NA values
clean_dataset <- dataset[complete.cases(dataset), ]
return(clean_dataset)
}
# Example usage:
# Assuming 'data' is your dataset
cleaned_data <- remove_na_rows(data)
# Example usage:
# Assuming 'data' is your dataset
cleaned_data <- remove_na_rows(housing)
remove_na_rows <- function(dataset) {
# Remove rows with any NA values
clean_dataset <- dataset[complete.cases(dataset), ]
return(clean_dataset)
}
# Example usage:
# Assuming 'data' is your dataset
cleaned_data <- remove_na_rows(housing)
View(cleaned_data)
pacman::p_load(tidyverse,dplyr,readr)
housing <- read_csv("train.csv")
View(housing)
remove_na_rows <- function(dataset) {
# Remove rows with any NA values
clean_dataset <- dataset[complete.cases(dataset), ]
return(clean_dataset)
}
# Example usage:
# Assuming 'data' is your dataset
cleaned_data <- remove_na_rows(housing)
View(cleaned_data)
head(data)
# Check for unique values in columns to understand how NA is represented
sapply(data, function(x) unique(x))
remove_na_rows <- function(dataset) {
# Print the number of rows before cleaning
cat("Number of rows before cleaning: ", nrow(dataset), "\n")
# Remove rows with any NA values
clean_dataset <- dataset[complete.cases(dataset), ]
# Print the number of rows after cleaning
cat("Number of rows after cleaning: ", nrow(clean_dataset), "\n")
return(clean_dataset)
}
# Example usage:
# Assuming 'data' is your dataset
cleaned_data <- remove_na_rows(housing)
# Inspect the cleaned dataset
head(cleaned_data)
head(data)
# Check for unique values in columns to understand how NA is represented
sapply(housing, function(x) unique(x))
str(housing)
clean_data <- data[complete.cases(data), ]
head(data)
# Check for unique values in columns to understand how NA is represented
sapply(housing, function(x) unique(x))
str(housing)
