x2==0 &  x3==1 &  x9==1 &  x10==-1  &  x8<0 ~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8<0~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==-1 &  x10==-1 &  x8<0~ "Quadratic Down Left",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8<0~ "Quadratic Down Left",
))
rdat2 <- rdat2 %>%
mutate( x11 = ifelse(mycolor=="Quadratic Down Right", 1, 0),
x12 = ifelse(mycolor=="Quadratic Up Right", 1, 0),
x13 = ifelse(mycolor=="Cubic Down", 1, 0),
x14 = ifelse(mycolor=="Cubic Up", 1, 0),
x15 = ifelse(mycolor=="Quintic Down", 1, 0),
x16 = ifelse(mycolor=="Quintic Up", 1, 0),
x17 = ifelse(mycolor=="Quadratic Down Left", 1, 0),
x18 = ifelse(mycolor=="Quadratic Up Left", 1, 0))
saunderspred <- predict(lm(y ~  x11 +  x11: x8 +   x11:I( x8^2) + #Quadratic Down Right
x12 +    x12: x8 +  x12:I( x8^2) +  #Quadratic Up Right
x17 +  x17: x8 +  x17:I( x8^2) +   #Quadratic Down Left
x18 +  x18: x8 +  x18:I( x8^2) +   #Quadratic Up Left
x13: x8 +   x13:I( x8^3) +        #Cubic Down
x14: x8 +   x14:I( x8^3) +        #Cubic Up
x15: x8 +   x15:I( x8^3) +    x15:I( x8^5) +     #Quintic Down
x16: x8 +   x16:I( x8^3) +    x16:I( x8^5)     #Quintic Up
, data=rdat2))
summary(zachpred)
ben.lm <- lm(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=rbdata)
benpred <- predict(ben.lm)
zach.lm <- lm(y^2 ~ I(x8^2) + I(x1) + I(x1):I(x8^2) + x7 + x9:x7:x8 + x7:I(x8^2), data = rbdata2)
zachpred <- predict(zach.lm)
sam.lm <- lm(y ~ x8 + I(x8^2) + x4 + x8:x4)
sampred <- predict(sam.lm)
rdat2 <- rbdata2 %>%
mutate(mycolor = case_when(
x2==0 &  x3==0 &  x9==-1 &  x10==-1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==-1 ~ "Cubic Up",
x2==0 &  x3==0 &  x9==-1 &  x10==1 ~ "Cubic Up",
x2==1 &  x3==0 &  x9==-1 &  x10==-1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==-1 ~ "Quintic Down",
x2==1 &  x3==0 &  x9==-1 &  x10==1 ~ "Quintic Down",
x2==0 &  x3==1 &  x9==-1 &  x10==-1  &  x8>0 ~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8>0~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1  &  x8<0 ~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8<0~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==-1 &  x10==-1 &  x8<0~ "Quadratic Down Left",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8<0~ "Quadratic Down Left",
))
rdat2 <- rdat2 %>%
mutate( x11 = ifelse(mycolor=="Quadratic Down Right", 1, 0),
x12 = ifelse(mycolor=="Quadratic Up Right", 1, 0),
x13 = ifelse(mycolor=="Cubic Down", 1, 0),
x14 = ifelse(mycolor=="Cubic Up", 1, 0),
x15 = ifelse(mycolor=="Quintic Down", 1, 0),
x16 = ifelse(mycolor=="Quintic Up", 1, 0),
x17 = ifelse(mycolor=="Quadratic Down Left", 1, 0),
x18 = ifelse(mycolor=="Quadratic Up Left", 1, 0))
saunderspred <- predict(lm(y ~  x11 +  x11: x8 +   x11:I( x8^2) + #Quadratic Down Right
x12 +    x12: x8 +  x12:I( x8^2) +  #Quadratic Up Right
x17 +  x17: x8 +  x17:I( x8^2) +   #Quadratic Down Left
x18 +  x18: x8 +  x18:I( x8^2) +   #Quadratic Up Left
x13: x8 +   x13:I( x8^3) +        #Cubic Down
x14: x8 +   x14:I( x8^3) +        #Cubic Up
x15: x8 +   x15:I( x8^3) +    x15:I( x8^5) +     #Quintic Down
x16: x8 +   x16:I( x8^3) +    x16:I( x8^5)     #Quintic Up
, data=rdat2))
ben.lm <- lm(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=rbdata)
benpred <- predict(ben.lm)
zach.lm <- lm(y^2 ~ I(x8^2) + I(x1) + I(x1):I(x8^2) + x7 + x9:x7:x8 + x7:I(x8^2), data = rbdata2)
zachpred <- predict(zach.lm)
sam.lm <- lm(y ~ x8 + I(x8^2) + x4 + x8:x4)
sampred <- predict(sam.lm)
rdat2 <- rbdata2 %>%
mutate(mycolor = case_when(
x2==0 &  x3==0 &  x9==-1 &  x10==-1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==-1 ~ "Cubic Up",
x2==0 &  x3==0 &  x9==-1 &  x10==1 ~ "Cubic Up",
x2==1 &  x3==0 &  x9==-1 &  x10==-1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==-1 ~ "Quintic Down",
x2==1 &  x3==0 &  x9==-1 &  x10==1 ~ "Quintic Down",
x2==0 &  x3==1 &  x9==-1 &  x10==-1  &  x8>0 ~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8>0~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1  &  x8<0 ~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8<0~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==-1 &  x10==-1 &  x8<0~ "Quadratic Down Left",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8<0~ "Quadratic Down Left",
))
rdat2 <- rdat2 %>%
mutate( x11 = ifelse(mycolor=="Quadratic Down Right", 1, 0),
x12 = ifelse(mycolor=="Quadratic Up Right", 1, 0),
x13 = ifelse(mycolor=="Cubic Down", 1, 0),
x14 = ifelse(mycolor=="Cubic Up", 1, 0),
x15 = ifelse(mycolor=="Quintic Down", 1, 0),
x16 = ifelse(mycolor=="Quintic Up", 1, 0),
x17 = ifelse(mycolor=="Quadratic Down Left", 1, 0),
x18 = ifelse(mycolor=="Quadratic Up Left", 1, 0))
saunders.lm <- lm(y ~  x11 +  x11: x8 +   x11:I( x8^2) + #Quadratic Down Right
x12 +    x12: x8 +  x12:I( x8^2) +  #Quadratic Up Right
x17 +  x17: x8 +  x17:I( x8^2) +   #Quadratic Down Left
x18 +  x18: x8 +  x18:I( x8^2) +   #Quadratic Up Left
x13: x8 +   x13:I( x8^3) +        #Cubic Down
x14: x8 +   x14:I( x8^3) +        #Cubic Up
x15: x8 +   x15:I( x8^3) +    x15:I( x8^5) +     #Quintic Down
x16: x8 +   x16:I( x8^3) +    x16:I( x8^5)     #Quintic Up
, data=rdat2)
saunderspred <- predict(saunders.lm)
summary(zach.lm)
b <- coef(zach.lm)
y1 <- function(x,x9=0,x10=0,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y3 <- function(x,x9=0,x10=0,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)
b <- coef(zach.lm)
y1 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y3 <- function(x,x9=1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y4 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y5 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y6 <- function(x,x9=-1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)
stat_function(fun=y4, col = "blue",linewidth=1.5) +
stat_function(fun=y5, col = "red",linewidth=1.5) +
stat_function(fun=y6, col = "purple",linewidth=1.5)
b <- coef(zach.lm)
y1 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y3 <- function(x,x9=1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y4 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y5 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
y6 <- function(x,x9=-1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
x^2 + x1 + x1 * x^2 + x7 + x9 * x7 * x + x7 * x^2
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)+
stat_function(fun=y4, col = "blue",linewidth=1.5) +
stat_function(fun=y5, col = "red",linewidth=1.5) +
stat_function(fun=y6, col = "purple",linewidth=1.5)
summary(zach.lm)
b <- coef(zach.lm)
y1 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
y3 <- function(x,x9=1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
y4 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
y5 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
y6 <- function(x,x9=-1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x^2 + b[3] * x1 + b[4] * x7 + b[5]* x^2 * x1 + b[6] * x^2 * x7 + b[7] * x7*x*x9
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)+
stat_function(fun=y4, col = "blue",linewidth=1.5) +
stat_function(fun=y5, col = "red",linewidth=1.5) +
stat_function(fun=y6, col = "purple",linewidth=1.5)
summary(sam.lm)
y1 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y3 <- function(x,x9=1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y4 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y5 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y6 <- function(x,x9=-1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)
y1 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y2 <- function(x,x9=1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y3 <- function(x,x9=1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y4 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y5 <- function(x,x9=-1,x10=1,x1=0,x2=0,x3=0,x4=0,x5=0,x6=1,x7=0) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
y6 <- function(x,x9=-1,x10=1,x1=1,x2=1,x3=1,x4=1,x5=1,x6=1,x7=1) {
b[1] + b[2] * x + b[3] * x^2 + b[4] * x4 + b[5] * x * x4
}
ggplot(rbdata,aes(y=y,x=x8,col=interaction(x1,x2,x3,x4,x5,x6,x7,x9*x10))) +
geom_point(size=1)+
scale_y_continuous(lim=c(-25,+25)) +
stat_function(fun=y1, col = "gold",linewidth=1.5) +
stat_function(fun=y2, col = "forestgreen",linewidth=1.5) +
stat_function(fun=y3, col = "orange",linewidth=1.5)+
stat_function(fun=y4, col = "blue",linewidth=1.5) +
stat_function(fun=y5, col = "red",linewidth=1.5) +
stat_function(fun=y6, col = "purple",linewidth=1.5)
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rbdata2)
ben.lm <- lm(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=rbdata)
benpred <- predict(ben.lm)
zach.lm <- lm(y^2 ~ I(x8^2) + I(x1) + I(x1):I(x8^2) + x7 + x9:x7:x8 + x7:I(x8^2), data = rbdata2)
zachpred <- predict(zach.lm)
sam.lm <- lm(y ~ x8 + I(x8^2) + x4 + x8:x4)
sampred <- predict(sam.lm)
rdat2 <- rbdata2 %>%
mutate(mycolor = case_when(
x2==0 &  x3==0 &  x9==-1 &  x10==-1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==1 ~ "Cubic Down",
x2==0 &  x3==0 &  x9==1 &  x10==-1 ~ "Cubic Up",
x2==0 &  x3==0 &  x9==-1 &  x10==1 ~ "Cubic Up",
x2==1 &  x3==0 &  x9==-1 &  x10==-1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==1 ~ "Quintic Up",
x2==1 &  x3==0 &  x9==1 &  x10==-1 ~ "Quintic Down",
x2==1 &  x3==0 &  x9==-1 &  x10==1 ~ "Quintic Down",
x2==0 &  x3==1 &  x9==-1 &  x10==-1  &  x8>0 ~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8>0~ "Quadratic Up Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1  &  x8<0 ~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8<0~ "Quadratic Up Left",
x2==0 &  x3==1 &  x9==-1 &  x10==1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==1 &  x10==-1 &  x8>0~ "Quadratic Down Right",
x2==0 &  x3==1 &  x9==-1 &  x10==-1 &  x8<0~ "Quadratic Down Left",
x2==0 &  x3==1 &  x9==1 &  x10==1 &  x8<0~ "Quadratic Down Left",
))
rdat2 <- rdat2 %>%
mutate( x11 = ifelse(mycolor=="Quadratic Down Right", 1, 0),
x12 = ifelse(mycolor=="Quadratic Up Right", 1, 0),
x13 = ifelse(mycolor=="Cubic Down", 1, 0),
x14 = ifelse(mycolor=="Cubic Up", 1, 0),
x15 = ifelse(mycolor=="Quintic Down", 1, 0),
x16 = ifelse(mycolor=="Quintic Up", 1, 0),
x17 = ifelse(mycolor=="Quadratic Down Left", 1, 0),
x18 = ifelse(mycolor=="Quadratic Up Left", 1, 0))
saunders.lm <- lm(y ~  x11 +  x11: x8 +   x11:I( x8^2) + #Quadratic Down Right
x12 +    x12: x8 +  x12:I( x8^2) +  #Quadratic Up Right
x17 +  x17: x8 +  x17:I( x8^2) +   #Quadratic Down Left
x18 +  x18: x8 +  x18:I( x8^2) +   #Quadratic Up Left
x13: x8 +   x13:I( x8^3) +        #Cubic Down
x14: x8 +   x14:I( x8^3) +        #Cubic Up
x15: x8 +   x15:I( x8^3) +    x15:I( x8^5) +     #Quintic Down
x16: x8 +   x16:I( x8^3) +    x16:I( x8^5)     #Quintic Up
, data=rdat2)
saunderspred <- predict(saunders.lm)
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rdat2)
# Compute y-bar
ybar <- mean(rbdata2$y) #Yi is given by Ynew from the new sample of data
# Compute SSTO
SSTO <- sum( (rbdata2$y - ybar)^2 )
# Compute SSE for each model using y - yhat
ben.SSE <- sum( (rbdata2$y - ben.yh)^2 )
zach.SSE <- sum( (rbdata2$y - zach.yh)^2 )
sam.SSE <- sum( (rbdata2$y - sam.yh)^2 )
saunders.SSE <- sum( (saunders.yh)^2 )
# Compute R-squared for each
ben.rs <- 1 - ben.SSE/SSTO
zach.rs <- 1 - zach.SSE/SSTO
sam.rs <- 1 - sam.SSE/SSTO
saunders.rs <- 1 - saunders.SSE/SSTO
# Compute adjusted R-squared for each
n <- length(rbdata$y) #sample size
ben.p <- length(coef(test.lm)) #num. parameters in model
zach.p <- length(coef(zach.lm)) #num. parameters in model
sam.p <- length(coef(sam.lm)) #num. parameters in model
saunders.p <- length(coef(saunders.lm)) #num. parameters in model
ben.rsa <- 1 - (n-1)/(n-ben.p)*ben.SSE/SSTO
zach.rsa <- 1 - (n-1)/(n-zach.p)*zach.SSE/SSTO
sam.rsa <- 1 - (n-1)/(n-sam.p)*sam.SSE/SSTO
saunders.rsa <- 1 - (n-1)/(n-saunders.p)*saunders.SSE/SSTO
my_output_table2 <- data.frame(
Model = c("Ben", "Zach", "Sam", "Saunders"),
`Original R2` = c(summary(test.lm)$r.squared, summary(zach.lm)$r.squared, summary(sam.lm)$r.squared, summary(saunders.lm)$r.squared),
`Orig. Adj. R-squared` = c(summary(test.lm)$adj.r.squared, summary(zach.lm)$adj.r.squared, summary(sam.lm)$adj.r.squared, summary(saunders.lm)$adj.r.squared),
`Validation R-squared` = c(ben.rs, zach.rs, sam.rs, saunders.rs),
`Validation Adj. R^2` = c(ben.rsa, zach.rsa, sam.rsa, saunders.rsa)
)
colnames(my_output_table2) <- c("Model", "Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=4)
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rdat2)
# Compute y-bar
ybar <- mean(rbdata2$y) #Yi is given by Ynew from the new sample of data
# Compute SSTO
SSTO <- sum( (rbdata2$y - ybar)^2 )
# Compute SSE for each model using y - yhat
ben.SSE <- sum( (rbdata2$y - ben.yh)^2 )
zach.SSE <- sum( (rbdata2$y - zach.yh)^2 )
sam.SSE <- sum( (rbdata2$y - sam.yh)^2 )
saunders.SSE <- sum( (saunders.yh)^2 )
# Compute R-squared for each
ben.rs <- 1 - ben.SSE/SSTO
zach.rs <- 1 - zach.SSE/SSTO
sam.rs <- 1 - sam.SSE/SSTO
saunders.rs <- 1 - saunders.SSE/SSTO
# Compute adjusted R-squared for each
n <- length(rbdata$y) #sample size
ben.p <- length(coef(test.lm)) #num. parameters in model
zach.p <- length(coef(zach.lm)) #num. parameters in model
sam.p <- length(coef(sam.lm)) #num. parameters in model
saunders.p <- length(coef(saunders.lm)) #num. parameters in model
ben.rsa <- 1 - (n-1)/(n-ben.p)*ben.SSE/SSTO
zach.rsa <- 1 - (n-1)/(n-zach.p)*zach.SSE/SSTO
sam.rsa <- 1 - (n-1)/(n-sam.p)*sam.SSE/SSTO
saunders.rsa <- 1 - (n-1)/(n-saunders.p)*saunders.SSE/SSTO
my_output_table2 <- data.frame(
Model = c("Ben", "Zach", "Sam", "Saunders"),
`Original R2` = c(summary(test.lm)$r.squared, summary(zach.lm)$r.squared, summary(sam.lm)$r.squared, summary(saunders.lm)$r.squared),
`Orig. Adj. R-squared` = c(summary(test.lm)$adj.r.squared, summary(zach.lm)$adj.r.squared, summary(sam.lm)$adj.r.squared, summary(saunders.lm)$adj.r.squared),
`Validation R-squared` = c(ben.rs, zach.rs, sam.rs, saunders.rs),
`Validation Adj. R^2` = c(ben.rsa, zach.rsa, sam.rsa, saunders.rsa)
)
colnames(my_output_table2) <- c("Model", "Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=4)
palette(c("skyblue","orange","green","purple","steelblue","red","green3","black"))
plot(y ~  x8, data=rdat2, col=as.factor(mycolor))
points(final.lm$fit ~  x8, data=rdat2, col=as.factor(mycolor), pch=16, cex=0.5)
palette(c("skyblue","orange","green","purple","steelblue","red","green3","black"))
plot(y ~  x8, data=rdat2, col=as.factor(mycolor))
points(saunders.lm$fit ~  x8, data=rdat2, col=as.factor(mycolor), pch=16, cex=0.5)
b <- coef(final.lm)
palette(c("skyblue","orange","green","purple","steelblue","red","green3","black"))
plot(y ~  x8, data=rdat2, col=as.factor(mycolor))
points(saunders.lm$fit ~  x8, data=rdat2, col=as.factor(mycolor), pch=16, cex=0.5)
b <- coef(saunders.lm)
drawit <- function( x11=0,  x12=0,  x13=0,  x14=0,  x15=0,  x16=0,  x17=0,  x18=0, i=1){
curve(b[1] + b[2]* x11 + b[3]* x12 + b[4]* x17 + b[5]* x18 + b[6]* x11* x8 + b[7]* x11* x8^2 + b[8]* x8* x12 + b[9]* x8^2* x12 + b[10]* x8* x17 + b[11]* x8^2* x17 + b[12]* x8* x18 + b[13]* x8^2* x18 + b[14]* x8* x13 + b[15]* x13* x8^3 + b[16]* x8* x14 + b[17]* x8^3* x14 + b[18]* x8* x15 + b[19]* x8^3* x15 + b[20]* x15* x8^5 + b[21]* x8* x16 + b[22]* x8^3* x16 + b[23]* x8^5* x16, add=TRUE,  xname="x8", col=palette()[i])
}
drawit(1,0,0,0,0,0,0,0,4)
drawit(0,1,0,0,0,0,0,0,6)
drawit(0,0,1,0,0,0,0,0,1)
drawit(0,0,0,1,0,0,0,0,2)
drawit(0,0,0,0,1,0,0,0,7)
drawit(0,0,0,0,0,1,0,0,8)
drawit(0,0,0,0,0,0,1,0,3)
drawit(0,0,0,0,0,0,0,1,5)
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rbdata2) # Fixed variable name
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rbdat2) # Fixed variable name
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rdat2) # Fixed variable name
# Compute y-bar
ybar <- mean(rbdata2$y) # Yi is given by Ynew from the new sample of data
# Compute SSTO
SSTO <- sum((rbdata2$y - ybar)^2)
# Compute SSE for each model using y - yhat
ben.SSE <- sum((rbdata2$y - ben.yh)^2)
zach.SSE <- sum((rbdata2$y - zach.yh)^2)
sam.SSE <- sum((rbdata2$y - sam.yh)^2)
saunders.SSE <- sum((rbdata2$y - saunders.yh)^2) # Fixed SSE calculation
# Compute R-squared for each
ben.rs <- 1 - ben.SSE / SSTO
zach.rs <- 1 - zach.SSE / SSTO
sam.rs <- 1 - sam.SSE / SSTO
saunders.rs <- 1 - saunders.SSE / SSTO
# Compute adjusted R-squared for each
n <- length(rbdata2$y) # Sample size corrected to rbdata2
ben.p <- length(coef(test.lm)) # Number of parameters in model
zach.p <- length(coef(zach.lm)) # Number of parameters in model
sam.p <- length(coef(sam.lm)) # Number of parameters in model
saunders.p <- length(coef(saunders.lm)) # Number of parameters in model
ben.rsa <- 1 - (n-1)/(n-ben.p)*ben.SSE / SSTO
zach.rsa <- 1 - (n-1)/(n-zach.p)*zach.SSE / SSTO
sam.rsa <- 1 - (n-1)/(n-sam.p)*sam.SSE / SSTO
saunders.rsa <- 1 - (n-1)/(n-saunders.p)*saunders.SSE / SSTO
my_output_table2 <- data.frame(
Model = c("Ben", "Zach", "Sam", "Saunders"),
`Original R2` = c(summary(test.lm)$r.squared, summary(zach.lm)$r.squared, summary(sam.lm)$r.squared, summary(saunders.lm)$r.squared),
`Orig. Adj. R-squared` = c(summary(test.lm)$adj.r.squared, summary(zach.lm)$adj.r.squared, summary(sam.lm)$adj.r.squared, summary(saunders.lm)$adj.r.squared),
`Validation R-squared` = c(ben.rs, zach.rs, sam.rs, saunders.rs),
`Validation Adj. R^2` = c(ben.rsa, zach.rsa, sam.rsa, saunders.rsa)
)
colnames(my_output_table2) <- c("Model", "Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=4)
# This is a hotfix and is not good
rbdata2 <- rdat2
# Compute R-squared for each validation
# Get y-hat for each model on new data.
ben.yh <- predict(test.lm, newdata=rbdata2)
zach.yh <- predict(zach.lm, newdata=rbdata2)
sam.yh <- predict(sam.lm, newdata=rbdata2)
saunders.yh <- predict(saunders.lm, newdata=rdat2) # Fixed variable name
# Compute y-bar
ybar <- mean(rbdata2$y) # Yi is given by Ynew from the new sample of data
# Compute SSTO
SSTO <- sum((rbdata2$y - ybar)^2)
# Compute SSE for each model using y - yhat
ben.SSE <- sum((rbdata2$y - ben.yh)^2)
zach.SSE <- sum((rbdata2$y - zach.yh)^2)
sam.SSE <- sum((rbdata2$y - sam.yh)^2)
saunders.SSE <- sum((rbdata2$y - saunders.yh)^2) # Fixed SSE calculation
# Compute R-squared for each
ben.rs <- 1 - ben.SSE / SSTO
zach.rs <- 1 - zach.SSE / SSTO
sam.rs <- 1 - sam.SSE / SSTO
saunders.rs <- 1 - saunders.SSE / SSTO
# Compute adjusted R-squared for each
n <- length(rbdata2$y) # Sample size corrected to rbdata2
ben.p <- length(coef(test.lm)) # Number of parameters in model
zach.p <- length(coef(zach.lm)) # Number of parameters in model
sam.p <- length(coef(sam.lm)) # Number of parameters in model
saunders.p <- length(coef(saunders.lm)) # Number of parameters in model
ben.rsa <- 1 - (n-1)/(n-ben.p)*ben.SSE / SSTO
zach.rsa <- 1 - (n-1)/(n-zach.p)*zach.SSE / SSTO
sam.rsa <- 1 - (n-1)/(n-sam.p)*sam.SSE / SSTO
saunders.rsa <- 1 - (n-1)/(n-saunders.p)*saunders.SSE / SSTO
my_output_table2 <- data.frame(
Model = c("Ben", "Zach", "Sam", "Saunders"),
`Original R2` = c(summary(test.lm)$r.squared, summary(zach.lm)$r.squared, summary(sam.lm)$r.squared, summary(saunders.lm)$r.squared),
`Orig. Adj. R-squared` = c(summary(test.lm)$adj.r.squared, summary(zach.lm)$adj.r.squared, summary(sam.lm)$adj.r.squared, summary(saunders.lm)$adj.r.squared),
`Validation R-squared` = c(ben.rs, zach.rs, sam.rs, saunders.rs),
`Validation Adj. R^2` = c(ben.rsa, zach.rsa, sam.rsa, saunders.rsa)
)
colnames(my_output_table2) <- c("Model", "Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=4)
