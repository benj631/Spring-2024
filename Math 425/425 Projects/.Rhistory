# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
interaction_mapping <- function(x2, x4, x8, x9, x10) {
interaction <- 1 + x2 * 2 + x4 * 4 + x8 * 8 + x9 * 9 + x10 * 10
return(interaction)
}
# Assuming zachdata is your dataset with binary columns x2, x4, x8, x9, and x10
# Ensure columns are numeric and handle any NA values (though binary should not have NA)
zachdata <- zachdata %>%
mutate(across(c(x2, x4, x8, x9, x10), as.integer)) %>%
mutate(interaction = interaction_mapping(x2, x4, x8, x9, x10))
# Print the updated dataset
View(zachdata)
zachdata <- zachdata %>%
mutate(
interaction = x2 * 16 + x4 * 8 + x8 * 4 + x9 * 2 + x10 * 1
)
# Print the updated dataset with the 'interaction' column
View(zachdata)
# Print the updated dataset
View(zachdata)
ggplot(zachdata, aes(x=x6,y=y))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
interaction_mapping <- function(...) {
binary_vars <- list(...)
n_vars <- length(binary_vars)
weights <- 2^((n_vars - 1):0)
interaction_values <- Map(`*`, binary_vars, weights)
interaction <- Reduce(`+`, interaction_values)
return(interaction)
}
# Create the interaction variable in zachdata using the desired columns
zachdata <- zachdata %>%
mutate(interaction = interaction_mapping(x2, x4, x8, x9, x10))
# Print the updated dataset
View(zachdata)
unique_permutations <- list()
interaction_numbers <- integer(nrow(zachdata))
# Iterate through each row of the dataset
for (i in 1:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
unique_permutations <- list()
# Initialize a vector to store interaction numbers
interaction_numbers <- integer(nrow(zachdata))
# Iterate through each row of the dataset
for (i in 1:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
# Print the updated dataset
View(zachdata)
ggplot(zachdata, aes(x=x6,y=y))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x3))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x5,y=y,col=x3))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x3))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=x3))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x3,x2))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x2))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x2))+
geom_point() +
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=x3))+
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x6,y=y,col=x2))+
geom_point() +
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=x2) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=x2)) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=x3)) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
zachdata <- read_csv("zachdata.csv")
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
print(unique_permutations)
# Print the updated dataset
View(zachdata)
unique_permutations <- list(as.list(zachdata[1, c("x2","x3", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2","x3", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
print(unique_permutations)
# Print the updated dataset
View(zachdata)
zachdata <- read_csv("zachdata.csv")
unique_permutations <- list(as.list(zachdata[1, c("x2","x3", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2","x3", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
print(unique_permutations)
# Print the updated dataset
View(zachdata)
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
print(unique_permutations)
# Print the updated dataset
View(zachdata)
zachdata <- read_csv("zachdata.csv")
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
print(unique_permutations)
# Print the updated dataset
View(zachdata)
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
#make a table of the interactions
unique_combinations <- do.call(rbind, lapply(unique_permutations, as.data.frame))
unique_combinations <- unique_combinations %>%
mutate(interaction = 1:nrow(unique_combinations))
# Print the table of unique combinations
print(unique_combinations)
# Print the updated dataset
View(zachdata)
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3)) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
zachdata <- read_csv("zachdata.csv")
zachdata$logy = log(y)
zachdata <- read_csv("zachdata.csv")
zachdata$logy = sqrt(y)
zachdata <- read_csv("zachdata.csv")
zachdata$sqrty = sqrt(y)
zachdata <- read_csv("zachdata.csv")
zachdata$sqrtx1 <- sqrt(zachdata$x1)
zachdata <- read_csv("zachdata.csv")
zachdata$sqrtx1 <- sqrt(zachdata$x1)
zachdata <- read_csv("zachdata.csv")
zachdata$x1s <- sqrt(zachdata$x1)
unique_permutations <- list(as.list(zachdata[1, c("x2", "x4", "x8", "x9", "x10")]))
interaction_numbers <- integer(nrow(zachdata))
interaction_numbers[1] <- 1  # Assign the first row the interaction number 1
# Iterate through each row of the dataset starting from the second row
for (i in 2:nrow(zachdata)) {
# Extract the current permutation as a list
current_permutation <- as.list(zachdata[i, c("x2", "x4", "x8", "x9", "x10")])
# Check if the current permutation exists in the unique_permutations list
found <- FALSE
for (j in 1:length(unique_permutations)) {
if (identical(unique_permutations[[j]], current_permutation)) {
interaction_numbers[i] <- j
found <- TRUE
break
}
}
# If the permutation is new, add it to the unique_permutations list
if (!found) {
unique_permutations[[length(unique_permutations) + 1]] <- current_permutation
interaction_numbers[i] <- length(unique_permutations)
}
}
# Add the interaction numbers to the dataset
zachdata <- zachdata %>%
mutate(interaction = interaction_numbers)
#make a table of the interactions
unique_combinations <- do.call(rbind, lapply(unique_permutations, as.data.frame))
unique_combinations <- unique_combinations %>%
mutate(interaction = 1:nrow(unique_combinations))
# Print the table of unique combinations
print(unique_combinations)
# Print the updated dataset
View(zachdata)
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1s,y=y,col=interaction(x2,x3))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
# x3 is only involved in interactions 1 and 10, whatever that means.
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4,x5))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4,x5,x8,x9,x10))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4,x8,x9,x10))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x2,x3,x4))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
ggplot(zachdata, aes(x=x1,y=y,col=interaction(x8,x9,x10))) +
geom_point() +
# see the first chart, how x4 and 5 and 5 and x8 can't activate simultaneously
# geom_point(aes(y=lm2$fit),cex=0.5) +
facet_wrap(~ zachdata$interaction) +
theme_bw()
library(tidyverse)
library(pander)
library(dplyr)
library(readr)
library(tidyverse)
library(pander)
library(dplyr)
library(readr)
bendata <- read_csv("rbdata.csv")
plot(y~x8,bendata)
benlm <- m(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=bendata)
benlm <- lm(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=bendata)
benlm <- lm(y ~ x9:x10:(
x8 + I(x8^3) + x8:x1 + I(x8^3):x2 + I(x8^5):x6 + I(x8^-1):x3 + x8:x4 + I(x8^3):x5 + I(x8^5):x6:x7),data=bendata)
summary(benlm)
