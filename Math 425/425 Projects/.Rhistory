x7 <- sample(c(0,1),n,prob=c(.5,.5),replace = TRUE)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Each term is attached to a beta that modifies the base model.
# Still need to modify x's for each interval.
# Then, create betas, sigma, normal error terms and y
sigma <- 5 #change to whatever positive number you want
################################
# You ARE NOT ALLOWED to change this part:
epsilon_i <- rnorm(n, 0, sigma)
################################
# An example of how to make Y...
# y <-  beta0 + beta1*X1 + beta2*X2 + beta3*X4*X2 + epsilon_i
εi <- epsilon_i
# Betas
βint <- NA # Not using this, because everything crosses the y axis anyways
# Line pair 1
β1 <- 10 # x
β2 <- 15 # x^3
# Line pair 2
β3 <- -.25 # x
β4 <- .16666666666 # x^3
β8 <- -.4 # x^5
# Line pair 3
β5 <- 8  # x^-1
β6 <- -.6 # x
β7 <- .13333333333 #x^3
β8 <- -.4 # x^5
β9 <- .2 # x^5
# For reference
# y1 <- -10 * x -15 * x ^ 3 + εi
# y2 <- +10 * x + 15 * x ^ 3 + εi
# y3 <- -2.5 * x + 2.5 * x ^ 3 -.4* x ^ 5 + εi
# y4 <- +2.5 * x - 2.5 * x ^ 3 + .4* x ^ 5 + εi
# y5 = 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + .2 * x ^ 5 + εi
# y6 = -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - .2 * x ^ 5 + εi
# Very Important
x <- x8
y <- (
x9 * x10 * (
#   x^-1             x             x^3             x^5
β1 * x      + β2 * x^3      +
β3 * x * x1 + β4 * x^3 * x2 + β8 * x^5 * x6 +
β5 * x^-1 * x3 + β6 * x * x4 + β7 * x^3 * x5 + β9 * x^5 * x6 * x7 +
εi
)
)
# This loads your data into a data set:
data <- data.frame(y, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
############### Model Engineering ###############
# Line 1 Bounds - Limit X values for specific cases
lb1.1 <- -1
lb1.2 <- 1
lb2.1 <- -2.8572
lb2.2 <- 2.8572
lb3.1 <- -2.2628
lb3.2 <- -.2992
lb3.3 <- .2992
lb3.4 <- 2.2628
# β3: x1 ----> .25 x * x1 Modifier
# β4: x2 ----> .1666666666 x^3 * x2 Modifier
# β5: x3 ----> 8 x^-1 * x3 INSERT
# β6: x4 ----> .6 x * x4 Modifier
# β7: x5 ----> .13333333333 x^3 * x5
# β8: x6 ----> .4 x^5 * x6 (Case x6 == 1, x7 == 0)
# β9: x7 ----> .2 x^5 * x7 (Case x6 == 1, x7 == 1)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Limit Permutation Possibilities
condition1 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 0 & data$x7 == 0
condition2 <- data$x1 == 1 & data$x2 == 1 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 1 & data$x7 == 0
condition3 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 1 & data$x4 == 1 & data$x5 == 1 & data$x6 == 1 & data$x7 == 1
# Limit X values for specific cases
condition4 <- condition1 & data$x8 >= lb1.1 & data$x8 <= lb1.2
condition5 <- condition2 & data$x8 >= lb2.1 & data$x8 <= lb2.2
condition6 <- condition3 & ((data$x8 >= lb3.1 & data$x8 <= lb3.2) | (data$x8 >= lb3.3 & data$x8 <= lb3.4))
# Combine all conditions
include_all <- condition4 | condition5 | condition6
# Filter rows from the model matrix
rbdata <- data[include_all, ]
############### END ENGINEERING ###############
View(rbdata)
nrow(rbdata)
plot(y~x8,rbdata)
plot(y~x8,rbdata)
set.seed(123) # This ensures the randomness is the "same" everytime if you play the entire R-chunk as one entire piece of code. If you run lines separately, your data might not come out the same every time. You can pick any integer value you want for set.seed. Each choice produces a different sample, so you might want to play around with a few different choices.
## To begin, decide on your sample size. (You may have to revise it later to ensure all values in your lm(...) are significant.)
n <- 20000
## Then, create 10 X-variables using functions like rnorm(n, mean, sd), rchisq(n, df), rf(n, df1, df2), rt(n, df), rbeta(n, a, b), runif(n, a, b) or sample(c(1,0), n, replace=TRUE)... ## To see what any of these functions do, run codes like hist(rchisq(n, 3)). These functions are simply allowing you to get a random sample of x-values. But the way you choose your x-values can have quite an impact on what the final scatterplot of the data will look like.
random_n1_1 <- function() ifelse(runif(1) > 0.5, 1, -1)
#random_0_1 <- function() rbinom(1, 1, 0.5)
random_0_1_p <- function(p = 0.5) {
rbinom(1, 1, p)
}
# Actual X values
# for set 1 ----->
x8 <- seq(-2.9, 2.9, length.out = n)
# Positive 1 or Negative 1 - With x5 make second line
x9 <- sample(c(-1,1),n,replace=TRUE)
# Either positive 1 or - 1 - depending on -1 interaction
x10 <- sample(c(-1,1),n,replace=TRUE)
# 2 term model is base model.
# y3/4 term 1 β3: .25 x * x1 Modifier
x1 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y3/4 term 2 β4 : .1666666666 x^3 * x2 Modifier
x2 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term1 β5: 8 x^-1 * x3 INSERT
x3 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term 2 β6: .6 x * x4 Modifier
x4 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# y5/6 term 3 β7: .13333333333 x^3 * x5
x5 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# These two together give us our x^5 term.
# Case x6 == 1, x7 == 0
# y3/4 term 4 β8: .4 x^5 * x6
x6 <- sample(c(0,1),n,prob=c(.3333,.6667),replace = TRUE)
# Case x6 == 1, x7 == 1
# y3/4 term 4 β9: .2 x^5 * x7
x7 <- sample(c(0,1),n,prob=c(.5,.5),replace = TRUE)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Each term is attached to a beta that modifies the base model.
# Still need to modify x's for each interval.
# Then, create betas, sigma, normal error terms and y
sigma <- 5 #change to whatever positive number you want
################################
# You ARE NOT ALLOWED to change this part:
epsilon_i <- rnorm(n, 0, sigma)
################################
# An example of how to make Y...
# y <-  beta0 + beta1*X1 + beta2*X2 + beta3*X4*X2 + epsilon_i
εi <- epsilon_i
# Betas
βint <- NA # Not using this, because everything crosses the y axis anyways
# Line pair 1
β1 <- 10 # x
β2 <- 15 # x^3
# Line pair 2
β3 <- -.25 # x
β4 <- .16666666666 # x^3
β8 <- -.4 # x^5
# Line pair 3
β5 <- 8  # x^-1
β6 <- -.6 # x
β7 <- .13333333333 #x^3
β8 <- -.4 # x^5
β9 <- .2 # x^5
# For reference
# y1 <- -10 * x -15 * x ^ 3 + εi
# y2 <- +10 * x + 15 * x ^ 3 + εi
# y3 <- -2.5 * x + 2.5 * x ^ 3 -.4* x ^ 5 + εi
# y4 <- +2.5 * x - 2.5 * x ^ 3 + .4* x ^ 5 + εi
# y5 = 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + .2 * x ^ 5 + εi
# y6 = -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - .2 * x ^ 5 + εi
# Very Important
x <- x8
y <- (
x9 * x10 * (
#   x^-1             x             x^3             x^5
β1 * x      + β2 * x^3      +
β3 * x * x1 + β4 * x^3 * x2 + β8 * x^5 * x6 +
β5 * x^-1 * x3 + β6 * x * x4 + β7 * x^3 * x5 + β9 * x^5 * x6 * x7 +
εi
)
)
# This loads your data into a data set:
data <- data.frame(y, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
############### Model Engineering ###############
# Line 1 Bounds - Limit X values for specific cases
lb1.1 <- -1
lb1.2 <- 1
lb2.1 <- -2.8572
lb2.2 <- 2.8572
lb3.1 <- -2.2628
lb3.2 <- -.2992
lb3.3 <- .2992
lb3.4 <- 2.2628
# β3: x1 ----> .25 x * x1 Modifier
# β4: x2 ----> .1666666666 x^3 * x2 Modifier
# β5: x3 ----> 8 x^-1 * x3 INSERT
# β6: x4 ----> .6 x * x4 Modifier
# β7: x5 ----> .13333333333 x^3 * x5
# β8: x6 ----> .4 x^5 * x6 (Case x6 == 1, x7 == 0)
# β9: x7 ----> .2 x^5 * x7 (Case x6 == 1, x7 == 1)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Limit Permutation Possibilities
condition1 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 0 & data$x7 == 0
condition2 <- data$x1 == 1 & data$x2 == 1 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 1 & data$x7 == 0
condition3 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 1 & data$x4 == 1 & data$x5 == 1 & data$x6 == 1 & data$x7 == 1
# Limit X values for specific cases
condition4 <- condition1 & data$x8 >= lb1.1 & data$x8 <= lb1.2
condition5 <- condition2 & data$x8 >= lb2.1 & data$x8 <= lb2.2
condition6 <- condition3 & ((data$x8 >= lb3.1 & data$x8 <= lb3.2) | (data$x8 >= lb3.3 & data$x8 <= lb3.4))
# Combine all conditions
include_all <- condition4 | condition5 | condition6
# Filter rows from the model matrix
# rbdata <- data[include_all, ]
############### END ENGINEERING ###############
data
plot(y~x8,data)
set.seed(123)
n <- 20000
# Actual X values
# for set 1 ----->
x8 <- seq(-2.9, 2.9, length.out = n)
# Positive 1 or Negative 1 - With x5 make second line
x9 <- sample(c(-1,1),n,replace=TRUE)
# Either positive 1 or - 1 - depending on -1 interaction
x10 <- sample(c(-1,1),n,replace=TRUE)
# 2 term model is base model.
# y3/4 term 1 β3: .25 x * x1 Modifier
x1 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y3/4 term 2 β4 : .1666666666 x^3 * x2 Modifier
x2 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term1 β5: 8 x^-1 * x3 INSERT
x3 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term 2 β6: .6 x * x4 Modifier
x4 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# y5/6 term 3 β7: .13333333333 x^3 * x5
x5 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# These two together give us our x^5 term.
# Case x6 == 1, x7 == 0
# y3/4 term 4 β8: .4 x^5 * x6
x6 <- sample(c(0,1),n,prob=c(.3333,.6667),replace = TRUE)
# Case x6 == 1, x7 == 1
# y3/4 term 4 β9: .2 x^5 * x7
x7 <- sample(c(0,1),n,prob=c(.5,.5),replace = TRUE)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Then, create betas, sigma, normal error terms and y
sigma <- 5 #change to whatever positive number you want
################################
# You ARE NOT ALLOWED to change this part:
epsilon_i <- rnorm(n, 0, sigma)
################################
# An example of how to make Y...
# y <-  beta0 + beta1*X1 + beta2*X2 + beta3*X4*X2 + epsilon_i
εi <- epsilon_i
# Betas
βint <- NA # Not using this
# Line pair 1
β1 <- 10 # x
β2 <- 15 # x^3
# Line pair 2
β3 <- -.25 # x
β4 <- .16666666666 # x^3
β8 <- -.4 # x^5
# Line pair 3
β5 <- 8  # x^-1
β6 <- -.6 # x
β7 <- .13333333333 #x^3
β8 <- -.4 # x^5
β9 <- .2 # x^5
# For reference
# y1 <- -10 * x -15 * x ^ 3 + εi
# y2 <- +10 * x + 15 * x ^ 3 + εi
# y3 <- -2.5 * x + 2.5 * x ^ 3 -.4* x ^ 5 + εi
# y4 <- +2.5 * x - 2.5 * x ^ 3 + .4* x ^ 5 + εi
# y5 = 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + .2 * x ^ 5 + εi
# y6 = -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - .2 * x ^ 5 + εi
# Very Important
x <- x8
y <- (
x9 * x10 * (
#   x^-1             x             x^3             x^5
β1 * x      + β2 * x^3      +
β3 * x * x1 + β4 * x^3 * x2 + β8 * x^5 * x6 +
β5 * x^-1 * x3 + β6 * x * x4 + β7 * x^3 * x5 + β9 * x^5 * x6 * x7 +
εi
)
)
# This loads your data into a data set:
data <- data.frame(y, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
############### Model Engineering ###############
# Line 1 Bounds - Limit X values for specific cases
lb1.1 <- -1
lb1.2 <- 1
lb2.1 <- -2.8572
lb2.2 <- 2.8572
lb3.1 <- -2.2628
lb3.2 <- -.2992
lb3.3 <- .2992
lb3.4 <- 2.2628
# β3: x1 ----> .25 x * x1 Modifier
# β4: x2 ----> .1666666666 x^3 * x2 Modifier
# β5: x3 ----> 8 x^-1 * x3 INSERT
# β6: x4 ----> .6 x * x4 Modifier
# β7: x5 ----> .13333333333 x^3 * x5
# β8: x6 ----> .4 x^5 * x6 (Case x6 == 1, x7 == 0)
# β9: x7 ----> .2 x^5 * x7 (Case x6 == 1, x7 == 1)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Limit Permutation Possibilities
condition1 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 0 & data$x7 == 0
condition2 <- data$x1 == 1 & data$x2 == 1 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 1 & data$x7 == 0
condition3 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 1 & data$x4 == 1 & data$x5 == 1 & data$x6 == 1 & data$x7 == 1
# Limit X values for specific cases
condition4 <- condition1 & data$x8 >= lb1.1 & data$x8 <= lb1.2
condition5 <- condition2 & data$x8 >= lb2.1 & data$x8 <= lb2.2
condition6 <- condition3 & ((data$x8 >= lb3.1 & data$x8 <= lb3.2) | (data$x8 >= lb3.3 & data$x8 <= lb3.4))
# Combine all conditions
include_all <- condition4 | condition5 | condition6
# Filter rows from the model matrix
rbdata <- data[include_all, ]
############### END ENGINEERING ###############
View(rbdata)
nrow(rbdata)
set.seed(123)
n <- 20000
# Actual X values
# for set 1 ----->
x8 <- seq(-2.9, 2.9, length.out = n)
# Positive 1 or Negative 1 - With x5 make second line
x9 <- sample(c(-1,1),n,replace=TRUE)
# Either positive 1 or - 1 - depending on -1 interaction
x10 <- sample(c(-1,1),n,replace=TRUE)
# 2 term model is base model.
# y3/4 term 1 β3: .25 x * x1 Modifier
x1 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y3/4 term 2 β4 : .1666666666 x^3 * x2 Modifier
x2 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term1 β5: 8 x^-1 * x3 INSERT
x3 <- sample(c(0,1),n,prob=c(.6667, .3333),replace = TRUE)
# y5/6 term 2 β6: .6 x * x4 Modifier
x4 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# y5/6 term 3 β7: .13333333333 x^3 * x5
x5 <- sample(c(0,1),n,prob=c(.6667,.3333),replace = TRUE)
# These two together give us our x^5 term.
# Case x6 == 1, x7 == 0
# y3/4 term 4 β8: .4 x^5 * x6
x6 <- sample(c(0,1),n,prob=c(.3333,.6667),replace = TRUE)
# Case x6 == 1, x7 == 1
# y3/4 term 4 β9: .2 x^5 * x7
x7 <- sample(c(0,1),n,prob=c(.5,.5),replace = TRUE)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Then, create betas, sigma, normal error terms and y
sigma <- 5 #change to whatever positive number you want
################################
# You ARE NOT ALLOWED to change this part:
epsilon_i <- rnorm(n, 0, sigma)
################################
# An example of how to make Y...
# y <-  beta0 + beta1*X1 + beta2*X2 + beta3*X4*X2 + epsilon_i
εi <- epsilon_i
# Betas
βint <- NA # Not using this
# Line pair 1
β1 <- 10 # x
β2 <- 15 # x^3
# Line pair 2
β3 <- -.25 # x
β4 <- .16666666666 # x^3
β8 <- -.4 # x^5
# Line pair 3
β5 <- 8  # x^-1
β6 <- -.6 # x
β7 <- .13333333333 #x^3
β8 <- -.4 # x^5
β9 <- .2 # x^5
# For reference
# y1 <- -10 * x -15 * x ^ 3 + εi
# y2 <- +10 * x + 15 * x ^ 3 + εi
# y3 <- -2.5 * x + 2.5 * x ^ 3 -.4* x ^ 5 + εi
# y4 <- +2.5 * x - 2.5 * x ^ 3 + .4* x ^ 5 + εi
# y5 = 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + .2 * x ^ 5 + εi
# y6 = -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - .2 * x ^ 5 + εi
# β3: x1 ----> -.25 x * x1 Modifier
# β4: x2 ----> .1666666666 x^3 * x2 Modifier
# β5: x3 ----> 8 x^-1 * x3 Addition
# β6: x4 ----> -.6 x * x4 Modifier
# β7: x5 ----> .13333333333 x^3 * x5 Modifier
# β8: x6 ----> .4 x^5 * x6 (Case x6 == 1, x7 == 0) Add
# β9: x7 ----> .2 x^5 * x7 (Case x6 == 1, x7 == 1)
# Very Important
x <- x8
y <- (
x9 * x10 * (
#   x^-1             x             x^3             x^5
β1 * x      + β2 * x^3      +
β3 * x * x1 + β4 * x^3 * x2 + β8 * x^5 * x6 +
β5 * x^-1 * x3 + β6 * x * x4 + β7 * x^3 * x5 + β9 * x^5 * x6 * x7 +
εi
)
)
# This loads your data into a data set:
data <- data.frame(y, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
############### Model Engineering ###############
# Line 1 Bounds - Limit X values for specific cases
lb1.1 <- -1
lb1.2 <- 1
lb2.1 <- -2.8572
lb2.2 <- 2.8572
lb3.1 <- -2.2628
lb3.2 <- -.2992
lb3.3 <- .2992
lb3.4 <- 2.2628
# β3: x1 ----> .25 x * x1 Modifier
# β4: x2 ----> .1666666666 x^3 * x2 Modifier
# β5: x3 ----> 8 x^-1 * x3 INSERT
# β6: x4 ----> .6 x * x4 Modifier
# β7: x5 ----> .13333333333 x^3 * x5
# β8: x6 ----> .4 x^5 * x6 (Case x6 == 1, x7 == 0)
# β9: x7 ----> .2 x^5 * x7 (Case x6 == 1, x7 == 1)
# Include Cases
# x1 - 7 == 0 (Base Model)
# x1,x2,x6, == 1, x5, x7 == 0 (Line 1)
# x3,x4,x5,x6,x7 = 1, x1, x2 = 0 (Line 2)
# Limit Permutation Possibilities
condition1 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 0 & data$x7 == 0
condition2 <- data$x1 == 1 & data$x2 == 1 & data$x3 == 0 & data$x4 == 0 & data$x5 == 0 & data$x6 == 1 & data$x7 == 0
condition3 <- data$x1 == 0 & data$x2 == 0 & data$x3 == 1 & data$x4 == 1 & data$x5 == 1 & data$x6 == 1 & data$x7 == 1
# Limit X values for specific cases
condition4 <- condition1 & data$x8 >= lb1.1 & data$x8 <= lb1.2
condition5 <- condition2 & data$x8 >= lb2.1 & data$x8 <= lb2.2
condition6 <- condition3 & ((data$x8 >= lb3.1 & data$x8 <= lb3.2) | (data$x8 >= lb3.3 & data$x8 <= lb3.4))
# Combine all conditions
include_all <- condition4 | condition5 | condition6
# Filter rows from the model matrix
rbdata <- data[include_all, ]
############### END ENGINEERING ###############
View(rbdata)
nrow(rbdata)
plot(y~x8,rbdata)
plot(y~x8,data)
library(ggplot2)
library(reshape2)
# Set seed for reproducibility
set.seed(42)
# Generate x values
x <- seq(-10, 10, length.out = 400)
# Define y values without epsilon
y1 <- 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + 2 * x ^ 5
y2 <- -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - 2 * x ^ 5
y3 <- -2.5 * x + 2.5 * x ^ 3 - 0.4 * x ^ 5
y4 <- 2.5 * x - 2.5 * x ^ 3 + 0.4 * x ^ 5
y5 <- x ^ -1
y6 <- -(x ^ -1)
y7 <- -10 * x - 15 * x ^ 3
y8 <- 10 * x + 15 * x ^ 3
# Create a data frame
df <- data.frame(
x = x,
y1 = y1,
y2 = y2,
y3 = y3,
y4 = y4,
y5 = y5,
y6 = y6,
y7 = y7,
y8 = y8
)
# Melt the data frame for easier plotting with ggplot
df_melted <- melt(df, id.vars = 'x')
# Plotting using ggplot2
ggplot(df_melted, aes(x = x, y = value, color = variable)) +
geom_line(size = 1.2) +
xlim(-2.9, 2.9) +
ylim(-25, 25) +
ggtitle('Plot of y1, y2, y3, y4, y5, y6, y7, and y8') +
theme_bw() +
labs(x = 'x', y = 'value')
library(ggplot2)
library(reshape2)
# Set seed for reproducibility
set.seed(42)
# Generate x values
x <- seq(-10, 10, length.out = 400)
# Define y values without epsilon
y1 <- -10 * x - 15 * x ^ 3
y2 <- 10 * x + 15 * x ^ 3
y3 <- -2.5 * x + 2.5 * x ^ 3 - 0.4 * x ^ 5
y4 <- 2.5 * x - 2.5 * x ^ 3 + 0.4 * x ^ 5
y5 <- 8 * x ^ -1 - 6 * x + 2 * x ^ 3 + 2 * x ^ 5
y6 <- -8 * x ^ -1 + 6 * x - 2 * x ^ 3 - 2 * x ^ 5
# Create a data frame
df <- data.frame(
x = x,
y1 = y1,
y2 = y2,
y3 = y3,
y4 = y4,
y5 = y5,
y6 = y6,
y7 = y7,
y8 = y8
)
# Melt the data frame for easier plotting with ggplot
df_melted <- melt(df, id.vars = 'x')
# Plotting using ggplot2
ggplot(df_melted, aes(x = x, y = value, color = variable)) +
geom_line(size = 1.2) +
xlim(-2.9, 2.9) +
ylim(-25, 25) +
ggtitle('Plot of y1, y2, y3, y4, y5, y6, y7, and y8') +
theme_bw() +
labs(x = 'x', y = 'value')
